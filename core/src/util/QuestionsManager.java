package util;

import com.badlogic.gdx.Gdx;

import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collections;

/**
 *  This class communicates with the .xslsx files directly.
 *  TheoreticalQ and ProgrammingQ objects are created, formatted, and stored into its respective ArrayLists.
 */
public class QuestionsManager {
    public static final String TAG = QuestionsManager.class.getName();
    public static final QuestionsManager instance = new QuestionsManager();
    public ArrayList<Question> questionsArrayList;

    private QuestionsManager() {
    }

    public ArrayList<Question> getQuestionsArrayList(){
        Gdx.app.log(TAG, "GET QUESTIONS ARRAYLIST");
        return this.questionsArrayList;
    }

    /**
     *  Initializes the theoreticalQArrayList and programmingQArrayList by retrieving the raw data from the excel file and
     *  converting them into objects and storing them in ArrayLists.
     */
    public void init() throws IOException {
        //fetch questions
        ExcelFileToArrayList excelFileToArrayList = new ExcelFileToArrayList();
        questionsArrayList = excelFileToArrayList.convertQuestions();
    }

    public class ExcelFileToArrayList {
        public ArrayList<Question> convertQuestions() throws IOException {
            ArrayList<Question> temp = new ArrayList<>();
            InputStream inputStream = this.getClass().getResourceAsStream("/Resources/TheoreticalQ-Database.xlsx");
            XSSFWorkbook workbook = new XSSFWorkbook(inputStream);
            XSSFSheet sheet = workbook.getSheetAt(0);

            int rows = sheet.getLastRowNum();
            int cols = sheet.getRow(1).getLastCellNum();

            String topic = null;
            String question = null;
            String choiceA = null;
            String choiceB = null;
            String choiceC = null;
            String choiceD = null;
            String correctChoice = null;
            String imageFilename = null;
            String difficulty = null;

            for (int r = 1; r <= rows; r++) {
                XSSFRow tempRow = sheet.getRow(r);

                for (int c = 1; c <= cols; c++) {
                    XSSFCell cell = tempRow.getCell(c);

                    switch (c) {
                        case 1:
                            topic = cell.toString();
                            break;
                        case 2:
                            question = cell.toString();
                            break;
                        case 3:
                            choiceA = cell.toString();
                            break;
                        case 4:
                            choiceB = cell.toString();
                            break;
                        case 5:
                            choiceC = cell.toString();
                            break;
                        case 6:
                            choiceD = cell.toString();
                            break;
                        case 7:
                            correctChoice = cell.toString();
                            break;
                        case 8:
                            if (cell == null || cell.getCellType() == CellType.BLANK) {
                                imageFilename = "null";
                            } else {
                                imageFilename = cell.toString();
                            }
                            break;
                        case 9:
                            difficulty = cell.toString();
                            break;
                    }
                }
                temp.add(new Question(topic, question, choiceA, choiceB, choiceC, choiceD, correctChoice, imageFilename, difficulty));
            }

            return temp;
        }
    }


    /**
     *  Each choice is stored as an object to provide convenience in making sure that each question has a random set of choices.
     */
        public static class Choice {
            private String choice;
            private boolean isCorrectChoice;

            public Choice(String choice, boolean isCorrectChoice) {
                this.choice = choice;
                this.isCorrectChoice = isCorrectChoice;
            }

            public String getChoice() {
                return choice;
            }

            public boolean isCorrectChoice() {
                return isCorrectChoice;
            }


        }

    /**
     *  TheoreticalQ class that stores the topic, question, ArrayList<Choice> choice, imageFilename (if any), and difficulty
     *  of the Theoretical questions.
     */
        public static class Question {
            private final String topic;
            private final String question;
            private final ArrayList<Choice> choice;
            private final String correctChoice;
            private final String imageFilename;
            private final String difficulty;

            public Question(String topic, String question, String choiceA, String choiceB, String choiceC,
                                String choiceD, String correctChoice, String imageFilename, String difficulty) {
                this.topic = topic;
                this.question = question.trim();
                //store choices into ArrayList
                choice = new ArrayList<>();

                if(correctChoice.equalsIgnoreCase("A")){
                    choice.add(new Choice(choiceA.trim(), true));
                    choice.add(new Choice(choiceB.trim(), false));
                    choice.add(new Choice(choiceC.trim(), false));
                    choice.add(new Choice(choiceD.trim(), false));
                }
                if(correctChoice.equalsIgnoreCase("B")){
                    choice.add(new Choice(choiceA.trim(), false));
                    choice.add(new Choice(choiceB.trim(), true));
                    choice.add(new Choice(choiceC.trim(), false));
                    choice.add(new Choice(choiceD.trim(), false));
                }
                if(correctChoice.equalsIgnoreCase("C")){
                    choice.add(new Choice(choiceA.trim(), false));
                    choice.add(new Choice(choiceB.trim(), false));
                    choice.add(new Choice(choiceC.trim(), true));
                    choice.add(new Choice(choiceD.trim(), false));
                }
                if(correctChoice.equalsIgnoreCase("D")){
                    choice.add(new Choice(choiceA.trim(), false));
                    choice.add(new Choice(choiceB.trim(), false));
                    choice.add(new Choice(choiceC.trim(), false));
                    choice.add(new Choice(choiceD.trim(), true));
                }

                //shuffle choices to ensure randomness
                Collections.shuffle(choice);
                this.correctChoice = correctChoice;
                this.imageFilename = imageFilename;
                this.difficulty = difficulty;
            }

        public String getTopic() {
            return topic;
        }

        public String getQuestion() {
            return question;
        }

        public ArrayList<Choice> getChoice(){
            return this.choice;
        }

        public String getImageFilename() {
            return imageFilename;
        }

        public String getDifficulty() {
            return difficulty;
        }

    }

}



