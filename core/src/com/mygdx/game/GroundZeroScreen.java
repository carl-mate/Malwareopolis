package com.mygdx.game;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.audio.Music;
import com.badlogic.gdx.audio.Sound;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.math.MathUtils;
import com.badlogic.gdx.scenes.scene2d.ui.Label;

import java.io.IOException;
import java.util.concurrent.TimeUnit;

public class GroundZeroScreen extends BaseScreen{
    Paddle paddle;
    Ball ball;
    MalwareBucks bucks;
    int score;
    int balls;
    int wave; // for wave mechanic
    boolean isInvincible; // for invincibility capsule
    boolean leftArmExists; // flag for left arm existence
    boolean rightArmExists; // flag for right arm existence
    int leftArmCounter; // count of left arm parts
    int rightArmCounter; // count of right arm parts
    long startTimeCooldown; // time when invincibility capsule is picked up
    long currentTimeCooldown; // current time
    Label scoreLabel;
    Label ballsLabel;
    Label waveLabel;
    Label messageLabel;
    Sound invincibility;
    Sound beamSound;
    Sound headBounce;
    Sound gameOver;
    Sound gameWin;
    Sound bounceSound;
    Sound brickBumpSound;
    Sound wallBumpSound;
    Sound itemAppearSound;
    Sound itemCollectSound;
    Music backgroundMusic;
    Music bossBackgroundMusic;
    Brick leftArmPart1, leftArmPart2, leftArmPart3, leftArmPart4, leftArmPart5, leftArmPart6, leftArmPart7; // left arm parts
    Brick rightArmPart1, rightArmPart2, rightArmPart3, rightArmPart4, rightArmPart5, rightArmPart6, rightArmPart7; // right arm parts
    Brick headPart1, headPart2, headPart3, headPart4, headPart5, headPart6, headPart7, headPart8, headPart9, headPart10, headPart11; // head parts

    public GroundZeroScreen() throws IOException {
    }

    public void initialize()
    {
        BaseActor background = new BaseActor(0,0, mainStage);
        background.loadTexture("bg.png");
        BaseActor.setWorldBounds(background);

        paddle = new Paddle(320,32, mainStage, isInvincible);
        new Wall(0,0,20,600, mainStage); // left wall
        new Wall(780,0,20,600, mainStage); // right wall
        new Wall(0,550,800,50, mainStage); // top wall

        Brick tempBrick = new Brick(0,0, mainStage);
        float brickWidth = tempBrick.getWidth() + 20; // add a small amount to increase gaps between bricks
        float brickHeight = tempBrick.getHeight() + 20; // add a small amount to increase gaps between bricks
        tempBrick.remove();

        int totalRows = 5; // change if you want to generate a different number of bricks
        int totalCols = 5; // change if you want to generate a different number of bricks
        float marginX = (800 - totalCols * brickWidth)/2; // tweak last part to center bricks
        float marginY = (600 - totalRows * brickHeight) - 100; // tweak last part to center bricks

        for(int rowNum = 0; rowNum < totalRows; rowNum++){
            for(int colNum = 0; colNum < totalCols; colNum++){
                float x = marginX + brickWidth * colNum;
                float y = marginY + brickHeight * rowNum;
                new Brick(x,y,mainStage);
            }
        }

        ball = new Ball(0,0, mainStage);
        bucks = new MalwareBucks(0,0, mainStage);

        leftArmExists = false;
        rightArmExists = false;

        score = 0;
        balls = 3;
        wave = 1;
        scoreLabel = new Label(" " + score, BaseGame.labelStyle);
        ballsLabel = new Label("Balls:" + balls, BaseGame.labelStyle);
        waveLabel = new Label("Wave: " + wave, BaseGame.labelStyle);
        messageLabel = new Label("Click to Start!", BaseGame.labelStyle);
        messageLabel.setColor(Color.CYAN);

        uiTable.pad(5);
        uiTable.add(bucks);
        uiTable.add(scoreLabel);
        uiTable.add().expandX();
        uiTable.add(ballsLabel);
        uiTable.add().expandX();
        uiTable.add(waveLabel);
        uiTable.row();
        uiTable.add(messageLabel).colspan(5).expandY();

        invincibility = Gdx.audio.newSound(Gdx.files.internal("sounds/invincibility.wav"));
        beamSound = Gdx.audio.newSound(Gdx.files.internal("sounds/beamSound.wav"));
        headBounce = Gdx.audio.newSound(Gdx.files.internal("sounds/pop.wav"));
        gameOver = Gdx.audio.newSound(Gdx.files.internal("sounds/gameOver.wav"));
        gameWin = Gdx.audio.newSound(Gdx.files.internal("sounds/gameWin2.wav"));
        bounceSound = Gdx.audio.newSound(Gdx.files.internal("sounds/paddleBounce.wav"));
        brickBumpSound = Gdx.audio.newSound(Gdx.files.internal("sounds/brickBreak.wav"));
        wallBumpSound = Gdx.audio.newSound(Gdx.files.internal("sounds/wallBounce.wav"));
        itemAppearSound = Gdx.audio.newSound(Gdx.files.internal("sounds/swoosh.wav"));
        itemCollectSound = Gdx.audio.newSound(Gdx.files.internal("sounds/itemPickup.wav"));

        backgroundMusic = Gdx.audio.newMusic(Gdx.files.internal("sounds/cyberpunk-bg-music.mp3"));
        backgroundMusic.setLooping(true);
        backgroundMusic.setVolume(0.50f);
        backgroundMusic.play();

        isInvincible = false;
    }

    public void update(float dt)
    {
       float mouseX = Gdx.input.getX();
       paddle.setX(mouseX - paddle.getWidth()/2);
       paddle.boundToWorld();

       // center ball on paddle
       if(ball.isPaused()){
           ball.setX(paddle.getX() + paddle.getWidth()/2 - ball.getWidth()/2);
           ball.setY(paddle.getY() + paddle.getHeight()/2 + ball.getHeight()/2);
       }

       // bounce around walls
        for(BaseActor wall: BaseActor.getList(mainStage, "com.mygdx.game.Wall")){
            if(ball.overlaps(wall)){
                ball.bounceOff(wall);
                wallBumpSound.play();
            }
        }

        // bounce around bricks and remove
        for(BaseActor brick: BaseActor.getList(mainStage, "com.mygdx.game.Brick")){
            if(ball.overlaps(brick)){
                // check if brick hit is part of the left arm
                if(brick == leftArmPart1 || brick == leftArmPart2 || brick == leftArmPart3 || brick == leftArmPart4
                        || brick == leftArmPart5 || brick == leftArmPart6 || brick == leftArmPart7){
                    leftArmCounter -= 1;
                    System.out.println("Left arm counter: " + leftArmCounter);
                    if(leftArmCounter == 0)
                        leftArmExists = false;
                }
                // check if brick hit is part of the right arm
                if(brick == rightArmPart1 || brick == rightArmPart2 || brick == rightArmPart3 || brick == rightArmPart4
                        || brick == rightArmPart5 || brick == rightArmPart6 || brick == rightArmPart7) {
                    rightArmCounter -= 1;
                    System.out.println("Right arm counter: " + rightArmCounter);
                    if (rightArmCounter == 0)
                        rightArmExists = false;
                }

                // check if left arm and right arm exists
                if(leftArmExists)
                    System.out.println("Left arm exists!");
                else{
                    System.out.println("Left arm DOES NOT exist!");
                }

                if(rightArmExists)
                    System.out.println("Right arm exists!");
                else{
                    System.out.println("Right arm DOES NOT exist!");
                }

                ball.bounceOff(brick);
                // check if brick hit is part of head
                if(leftArmExists || rightArmExists){
                    if(brick == headPart1 || brick == headPart2 || brick == headPart3 || brick == headPart4
                            || brick == headPart5 || brick == headPart6 || brick == headPart7
                            || brick == headPart8 || brick == headPart9 || brick == headPart10
                            || brick == headPart11)
                        continue;
                    else {
                        brick.remove();
                        score += 100;
                    }
                } else{
                    brick.remove();
                    score += 100;
                }
                scoreLabel.setText(" " + score);

                // spawning of items
                float spawnProbability = 10; // tweak whenever necessary to change probability
                if(MathUtils.random(0,100) < spawnProbability){
                    Item i = new Item(0,0, mainStage);
                    System.out.println("Item " + i.getType() + " has spawned!");
                    i.centerAtActor(brick);
                    itemAppearSound.play();
                }

                if(wave == 4){ // spawn beams at boss arms as long as arms exists -> BOSS WAVE
                    float beamProbability = 25; // tweak whenever necessary to change probability

                    if(MathUtils.random(0,100) < beamProbability && !ball.isPaused() && leftArmExists){ // shoot at left arm
                        Beams b = new Beams(0,0, mainStage);
                        beamSound.play();
                        b.setSpeed(350);
                        int x = MathUtils.random(1,7);
                        switch (x) {
//                            case 1 -> b.centerAtActor(leftArmPart1);
//                            case 2 -> b.centerAtActor(leftArmPart2);
//                            case 3 -> b.centerAtActor(leftArmPart3);
//                            case 4 -> b.centerAtActor(leftArmPart4);
//                            case 5 -> b.centerAtActor(leftArmPart5);
//                            case 6 -> b.centerAtActor(leftArmPart6);
//                            case 7 -> b.centerAtActor(leftArmPart7);
                            case 1 : b.centerAtActor(leftArmPart1); break;
                            case 2 : b.centerAtActor(leftArmPart2); break;
                            case 3 : b.centerAtActor(leftArmPart3); break;
                            case 4 : b.centerAtActor(leftArmPart4); break;
                            case 5 : b.centerAtActor(leftArmPart5); break;
                            case 6 : b.centerAtActor(leftArmPart6); break;
                            case 7 : b.centerAtActor(leftArmPart7); break;
                        }
                    }
                    if(MathUtils.random(0,100) < beamProbability && !ball.isPaused() && rightArmExists) { // shoot at right arm
                        Beams b = new Beams(0, 0, mainStage);
                        beamSound.play();
                        b.setSpeed(350);
                        int x = MathUtils.random(1, 7);
                        switch (x) {
//                            case 1 -> b.centerAtActor(rightArmPart1);
//                            case 2 -> b.centerAtActor(rightArmPart2);
//                            case 3 -> b.centerAtActor(rightArmPart3);
//                            case 4 -> b.centerAtActor(rightArmPart4);
//                            case 5 -> b.centerAtActor(rightArmPart5);
//                            case 6 -> b.centerAtActor(rightArmPart6);
//                            case 7 -> b.centerAtActor(rightArmPart7);
                            case 1 : b.centerAtActor(rightArmPart1); break;
                            case 2 : b.centerAtActor(rightArmPart2); break;
                            case 3 : b.centerAtActor(rightArmPart3); break;
                            case 4 : b.centerAtActor(rightArmPart4); break;
                            case 5 : b.centerAtActor(rightArmPart5); break;
                            case 6 : b.centerAtActor(rightArmPart6); break;
                            case 7 : b.centerAtActor(rightArmPart7); break;
                        }
                    }
                } else { // spawn beams randomly at the top
                    float beamProbability = 15; // tweak whenever necessary to change probability
                    if(MathUtils.random(0,100) < beamProbability && !ball.isPaused()){
                        Beams b = new Beams(0,0, mainStage);
                        beamSound.play();
                        if(wave == 1)
                            b.setSpeed(200);
                        else if(wave == 2)
                            b.setSpeed(300);
                        else if(wave == 3)
                            b.setSpeed(350);

                        int x = MathUtils.random(0, 800);
                        b.centerAtPosition(x, 600);
                    }
                }

                brickBumpSound.play();
            }
        }

        // bounce off paddle
        if(ball.overlaps(paddle)){
            float ballCenterX = ball.getX() + ball.getWidth()/2;
            float paddlePercentHit = (ballCenterX - paddle.getX())/ paddle.getWidth();
            float bounceAngle = MathUtils.lerp(150,30,paddlePercentHit);
            ball.setMotionAngle(bounceAngle);
            bounceSound.play();
        }

        // wave mechanic
        if(BaseActor.count(mainStage, "com.mygdx.game.Brick") == 0 && wave != 4){
            wave += 1;
            if(wave == 4){ // boss wave
                backgroundMusic.stop();

                bossBackgroundMusic = Gdx.audio.newMusic(Gdx.files.internal("sounds/boss-fight.mp3"));
                bossBackgroundMusic.setLooping(true);
                bossBackgroundMusic.setVolume(0.50f);
                bossBackgroundMusic.play();

                waveLabel.setText("Wave: BOSS BATTLE");
                ball.setPaused(true);
                messageLabel.setText("Final Wave!\nClick to Start!");
                messageLabel.setColor(Color.FIREBRICK);
                messageLabel.setVisible(true);

                // brick size 64x28
                // make custom boss shape

                // head
                headPart1 = new Brick(306, 508, mainStage);
                headPart2 = new Brick(370, 508, mainStage);
                headPart3 = new Brick(434, 508, mainStage);

                headPart4 = new Brick(306, 480, mainStage);
                headPart5 = new Brick(434, 480, mainStage);

                headPart6 = new Brick(306, 452, mainStage);
                headPart7 = new Brick(370, 452, mainStage);
                headPart8 = new Brick(434, 452, mainStage);

                headPart9 = new Brick(306, 424, mainStage);
                headPart10 = new Brick(370, 424, mainStage);
                headPart11 = new Brick(434, 424, mainStage);

                // left arm
                new Brick(222, 452, mainStage);
                new Brick(150, 480, mainStage);
                new Brick(78, 452, mainStage);
                new Brick(78, 404, mainStage);

                leftArmPart1 = new Brick(20, 356, mainStage);
                leftArmPart2 = new Brick(84, 356, mainStage);
                leftArmPart3 = new Brick(148, 356, mainStage);
                leftArmPart4 = new Brick(20, 328, mainStage);
                leftArmPart5 = new Brick(20, 300, mainStage);
                leftArmPart6 = new Brick(148, 328, mainStage);
                leftArmPart7 = new Brick(148, 300, mainStage);

                // right arm
                new Brick(518, 452, mainStage);
                new Brick(590, 480, mainStage);
                new Brick(662, 452, mainStage);
                new Brick(662, 404, mainStage);

                rightArmPart1 = new Brick(715, 356, mainStage);
                rightArmPart2 = new Brick(651, 356, mainStage);
                rightArmPart3 = new Brick(587, 356, mainStage);
                rightArmPart4 = new Brick(715, 328, mainStage);
                rightArmPart5 = new Brick(715, 300, mainStage);
                rightArmPart6 = new Brick(587, 328, mainStage);
                rightArmPart7 = new Brick(587, 300, mainStage);

                // body
                new Brick(370, 386, mainStage);
                new Brick(370, 348, mainStage);
                new Brick(370, 310, mainStage);

                new Brick(306, 280, mainStage);
                new Brick(370, 280, mainStage);
                new Brick(434, 280, mainStage);

                new Brick(242, 252, mainStage);
                new Brick(306, 252, mainStage);
                new Brick(370, 252, mainStage);
                new Brick(434, 252, mainStage);
                new Brick(498, 252, mainStage);

                new Brick(178, 224, mainStage);
                new Brick(242, 224, mainStage);
                new Brick(306, 224, mainStage);
                new Brick(370, 224, mainStage);
                new Brick(434, 224, mainStage);
                new Brick(498, 224, mainStage);
                new Brick(562, 224, mainStage);

                new Brick(114, 196, mainStage);
                new Brick(178, 196, mainStage);
                new Brick(242, 196, mainStage);
                new Brick(306, 196, mainStage);
                new Brick(370, 196, mainStage);
                new Brick(434, 196, mainStage);
                new Brick(498, 196, mainStage);
                new Brick(562, 196, mainStage);
                new Brick(626, 196, mainStage);

                new Brick(114, 168, mainStage);
                new Brick(178, 168, mainStage);
                new Brick(242, 168, mainStage);
                new Brick(306, 168, mainStage);
                new Brick(370, 168, mainStage);
                new Brick(434, 168, mainStage);
                new Brick(498, 168, mainStage);
                new Brick(562, 168, mainStage);
                new Brick(626, 168, mainStage);

                leftArmCounter = 7;
                rightArmCounter = 7;
                leftArmExists = true;
                rightArmExists = true;

            } else { // waves 2 and 3
                waveLabel.setText("Wave: " + wave);
                ball.setPaused(true);
                messageLabel.setText("Wave " + wave + "!\nClick to Start!");
                messageLabel.setColor(Color.CYAN);
                messageLabel.setVisible(true);

                if (wave == 2) {
                    // brick size 64x28
                    // form rhombus shape -> 5 rows

                    // row 1
                    new Brick(365, 450, mainStage);
                    new Brick(449, 450, mainStage);
                    new Brick(533, 450, mainStage);
                    new Brick(617, 450, mainStage);
                    new Brick(701, 450, mainStage);
                    // row 2
                    new Brick(281, 402, mainStage);
                    new Brick(365, 402, mainStage);
                    new Brick(449, 402, mainStage);
                    new Brick(533, 402, mainStage);
                    new Brick(617, 402, mainStage);
                    // row 3
                    new Brick(197, 354, mainStage);
                    new Brick(281, 354, mainStage);
                    new Brick(365, 354, mainStage);
                    new Brick(449, 354, mainStage);
                    new Brick(533, 354, mainStage);
                    // row 4
                    new Brick(113, 306, mainStage);
                    new Brick(197, 306, mainStage);
                    new Brick(281, 306, mainStage);
                    new Brick(365, 306, mainStage);
                    new Brick(449, 306, mainStage);
                    // row 5
                    new Brick(29, 258, mainStage);
                    new Brick(113, 258, mainStage);
                    new Brick(197, 258, mainStage);
                    new Brick(281, 258, mainStage);
                    new Brick(365, 258, mainStage);
                } else if (wave == 3) {
                    // brick size 64x28
                    // form pyramid shape -> 5 rows
                    // brick size 64x28

                    // row 1
                    new Brick(370, 450, mainStage);
                    // row 2
                    new Brick(286, 402, mainStage);
                    new Brick(370, 402, mainStage);
                    new Brick(454, 402, mainStage);
                    // row 3
                    new Brick(202, 354, mainStage);
                    new Brick(286, 354, mainStage);
                    new Brick(370, 354, mainStage);
                    new Brick(454, 354, mainStage);
                    new Brick(538, 354, mainStage);
                    // row 4
                    new Brick(118, 306, mainStage);
                    new Brick(202, 306, mainStage);
                    new Brick(286, 306, mainStage);
                    new Brick(370, 306, mainStage);
                    new Brick(454, 306, mainStage);
                    new Brick(538, 306, mainStage);
                    new Brick(622, 306, mainStage);
                    // row 5
                    new Brick(34, 258, mainStage);
                    new Brick(118, 258, mainStage);
                    new Brick(202, 258, mainStage);
                    new Brick(286, 258, mainStage);
                    new Brick(370, 258, mainStage);
                    new Brick(454, 258, mainStage);
                    new Brick(538, 258, mainStage);
                    new Brick(622, 258, mainStage);
                    new Brick(706, 258, mainStage);
                }
            }
        }



        // player wins
        if(BaseActor.count(mainStage, "com.mygdx.game.Brick") == 0){
            //noinspection StatementWithEmptyBody
            if(score > 200000)
                // do nothing
                ;
            else {
                score += 200000;
                gameWin.play();
            }
            scoreLabel.setText(" " + score);
            messageLabel.setText("You Win!");
            messageLabel.setColor(Color.LIME);
            messageLabel.setVisible(true);
            backgroundMusic.stop();

        }

        // ball respawn mechanic and game over
        if(ball.getY() < -50 && BaseActor.count(mainStage, "Brick") > 0){
            ball.remove();
            if(balls > 0){
                balls -= 1;
                ballsLabel.setText("Balls: " + balls);
                ball = new Ball(0,0, mainStage);

                messageLabel.setText("Click to Start!");
                messageLabel.setColor(Color.CYAN);
            } else{
                messageLabel.setText("Game Over!");
                messageLabel.setColor(Color.RED);
                backgroundMusic.stop();
                if(balls == 0){
                    balls -= 1;
                    gameOver.play();
                }
            }
            messageLabel.setVisible(true);
        }

        // update according to the item picked up
        for(BaseActor item: BaseActor.getList(mainStage, "com.mygdx.game.Item")){
            if(paddle.overlaps(item)){
                Item realItem = (Item)item;
                float currentWidth = paddle.getWidth(); // get current width of paddle

                if(realItem.getType() == Item.Type.EXPAND_CAPSULE)
                    paddle.setWidth(paddle.getWidth() * 1.25f);
                else if(realItem.getType() == Item.Type.SHRINK_CAPSULE)
                    paddle.setWidth(paddle.getWidth() * 0.80f);
                else if(realItem.getType() == Item.Type.SPEED_CAPSULE)
                    ball.setSpeed(ball.getSpeed() * 1.50f);
                else if(realItem.getType() == Item.Type.SNAIL_CAPSULE)
                    ball.setSpeed(ball.getSpeed() * 0.90f);
                else if(realItem.getType() == Item.Type.INVINCIBILITY_CAPSULE){
                    score += 200; // malware bucks basically
                    scoreLabel.setText(" " + score);
                    // render paddle to be invincible for 30 seconds if question is answered correctly
                    invincibility.play();
                    isInvincible = true;
                    paddle.remove(); // remove old paddle model
                    float currentMouseX = Gdx.input.getX();
                    paddle = new Paddle(currentMouseX,32, mainStage, isInvincible); // insert invincible paddle model
                    paddle.setWidth(currentWidth); // set new paddle width to be same as the current width
                    System.out.println("INVINCIBILITY ON");
                    startTimeCooldown = System.currentTimeMillis(); // start the timer for the cooldown

                }


                paddle.setBoundaryRectangle();
                item.remove();
                itemCollectSound.play();
            }
        }

        // check if player is invincible
        if(isInvincible){
            // check if 30 seconds has passed since last invincibility activation
            // remove invincibility if 30 seconds has passed without getting another invincibility capsule
            currentTimeCooldown = System.currentTimeMillis();
            long result = currentTimeCooldown - startTimeCooldown;
            double seconds = TimeUnit.MILLISECONDS.toSeconds(result);
//            System.out.println("TIMER: " + seconds);
            if(seconds == 30.0){
                float currentWidth = paddle.getWidth(); // get current paddle width
                isInvincible = false;
                paddle.remove(); // remove old paddle model
                float currentMouseX = Gdx.input.getX();
                paddle = new Paddle(currentMouseX,32, mainStage, isInvincible); // insert normal paddle model
                paddle.setWidth(currentWidth); // set new paddle width to be same as current width
                System.out.println("INVINCIBILITY OFF");
                paddle.setBoundaryRectangle();
            }
        }

        // if beams hit player
        for(BaseActor beam: BaseActor.getList(mainStage, "com.mygdx.game.Beams")){
            if(paddle.overlaps(beam) && !isInvincible && !ball.isPaused()) {
                ball.remove();
                beam.remove();
                messageLabel.setText("Game Over!");
                messageLabel.setColor(Color.RED);
                messageLabel.setVisible(true);
                backgroundMusic.stop();
                gameOver.play();
            } else if((paddle.overlaps(beam) && isInvincible) || ball.isPaused()){
                beam.remove();
            }
        }
    }

    public boolean touchDown(int screenX, int screenY, int pointer, int button){
        if(ball.isPaused()){
            ball.setPaused(false);
            messageLabel.setVisible(false);
        }
        return false;
    }
}

