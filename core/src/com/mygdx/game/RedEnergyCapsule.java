package com.mygdx.game;

import com.badlogic.gdx.math.Interpolation;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.scenes.scene2d.InputEvent;
import com.badlogic.gdx.scenes.scene2d.InputListener;
import com.badlogic.gdx.scenes.scene2d.Stage;
import com.badlogic.gdx.scenes.scene2d.actions.Actions;

public class RedEnergyCapsule extends BaseActor{
    private float fallingSpeed = 100.0f;
    private ArivaPowerWasp arivaPowerWaspParent = null;
    private boolean canFly;
    private float lifetime = 5.0f;
    private float addAmount = 50f;

    public RedEnergyCapsule(float x, float y, Stage s, boolean fly) {
        super(x, y, s);
        speed = 300.0f;
        canFly = fly;

        String[] filenames = {"red-energy-capsule-1.png", "red-energy-capsule-2.png", "red-energy-capsule-3.png", "red-energy-capsule-4.png"};
        loadAnimationFromFiles(filenames, 0.1f, true);
        setBoundaryRectangle();

        addListener(new InputListener(){

            public boolean touchDown(InputEvent event, float eventOffsetX, float eventOffsetY, int pointer, int button)
            {
                if (lifetime > 0) {
                    moveToCollector();
                    lifetime = -1.0f;
                }
                return false; // returning true indicates other touch methods are called
            }
        });


    }

    void moveToCollector() {
        lifetime = Float.MAX_VALUE;
        float collectorX = 0;
        float collectorY = 511;

        float flyTime = Vector2.dst(collectorX, collectorY, this.getCenterX(), this.getCenterY()) / speed;
        addAction(Actions.scaleTo(0.5f, 0.5f, flyTime));
        addAction(Actions.moveTo(collectorX, collectorY, flyTime, Interpolation.pow3));
        this.addAction(Actions.after(Actions.fadeOut(0.2f)));
    }

    public void setArivaPowerWaspParent(ArivaPowerWasp arivaPowerWasp){
        if(!canFly){
            arivaPowerWaspParent = arivaPowerWasp;
        }
    }



    private void falling(float dt) {
        lifetime -= dt;
        if (canFly) {
            if (this.getY() > 600 || lifetime < 0) {
                return;
            }

            this.setSpeed(fallingSpeed);
            this.setMotionAngle(270);
            this.applyPhysics(dt);
        }
        // for static sunlight on sunflowers
        else {
            if (lifetime < 0)
                arivaPowerWaspParent.removeRedEnergyCapsule();
        }
    }

    public float getAddAmount() {
        return addAmount;
    }

    public void setAddAmount(int redCapsule) {
        addAmount = redCapsule;
    }

    @Override
    public void act(float dt) {
        super.act(dt);
        falling(dt);
    }

    @Override
    public boolean isAlive() {
        return lifetime > 0;
    }

}
