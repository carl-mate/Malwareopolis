package com.mygdx.game;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.InputMultiplexer;
import com.badlogic.gdx.InputProcessor;
import com.badlogic.gdx.Screen;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.scenes.scene2d.Stage;
import com.badlogic.gdx.scenes.scene2d.ui.Table;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;

import util.QuestionsManager;
import util.QuestionsManager.Question;

public abstract class BaseScreen implements Screen, InputProcessor {
    protected Stage mainStage;
    protected Stage uiStage;
    protected Table uiTable;
    protected QuestionsManager questionsManager;
    protected Questions questionClass;
    protected Question[] questions;
    protected ArrayList<Question> questionsArrayList;

    protected boolean paused = false;

    public BaseScreen() throws IOException {
        questionClass = new Questions();
        questions = questionClass.getQuestions();
        questionsArrayList = questionClass.getQuestionsArraylist();

        mainStage = new Stage();
        uiStage = new Stage();

        uiTable = new Table();
        uiTable.setFillParent(true);
        uiStage.addActor(uiTable);

        initialize();
    }

    protected Question getRandomQuestion(){
       Random rand = new Random();
       return questionsArrayList.get(rand.nextInt(questionsArrayList.size()));
    }

    protected abstract void initialize();

    public abstract void update(float dt);

    @Override
    public void render(float dt) {
        if (! paused) {
            mainStage.act(dt);
            showForMainStage();
            update(dt);
        }
        else {
            hideForMainStage();
        }

        uiStage.act(dt);

        // clear the screen
        Gdx.gl.glClearColor(0,0,0,1);
        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);

        // draw the graphics
        mainStage.draw();
        uiStage.draw();
    }

    @Override
    public boolean keyDown(int keycode) {
        return false;
    }

    @Override
    public boolean keyUp(int keycode) {
        return false;
    }

    @Override
    public boolean keyTyped(char character) {
        return false;
    }

    @Override
    public boolean touchDown(int screenX, int screenY, int pointer, int button) {
        return false;
    }

    @Override
    public boolean touchUp(int screenX, int screenY, int pointer, int button) {
        return false;
    }

    @Override
    public boolean touchDragged(int screenX, int screenY, int pointer) {
        return false;
    }

    @Override
    public boolean mouseMoved(int screenX, int screenY) {
        return false;
    }

    @Override
    public boolean scrolled(float amountX, float amountY) {
        return false;
    }

    public void hideForMainStage(){
        InputMultiplexer im = (InputMultiplexer)Gdx.input.getInputProcessor();
        if (im.getProcessors().indexOf(mainStage, true) != -1){
            im.removeProcessor(mainStage);
        }
    }

    public void showForMainStage() {
        InputMultiplexer im = (InputMultiplexer)Gdx.input.getInputProcessor();
        if (im.getProcessors().indexOf(mainStage, true) == -1)
            im.addProcessor(mainStage);
    }

    @Override
    public void show() {
        InputMultiplexer im = (InputMultiplexer) Gdx.input.getInputProcessor();
//        im.addProcessor(this);
        im.addProcessor(uiStage);
        im.addProcessor(mainStage);
    }

    @Override
    public void resize(int width, int height) {

    }

    @Override
    public void pause() {

    }

    @Override
    public void resume() {

    }

    @Override
    public void hide() {
        InputMultiplexer im = (InputMultiplexer) Gdx.input.getInputProcessor();
        im.removeProcessor(this);
        im.removeProcessor(uiStage);
        im.removeProcessor(mainStage);
    }

    @Override
    public void dispose() {

    }

    public void setPaused(boolean paused) {
        this.paused = paused;
    }
}
