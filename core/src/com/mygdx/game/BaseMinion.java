package com.mygdx.game;

import com.badlogic.gdx.graphics.g2d.Animation;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.scenes.scene2d.Stage;

public class BaseMinion extends BaseActor{
    protected float speedDecreaseDuration = -Float.MAX_VALUE;
    protected Animation<TextureRegion> walkAnimation;
    protected Animation<TextureRegion> eatAnimation;
    protected float normalSpeed;
    protected float CD = 1.0f;
    protected float damage = 20;
    protected float coolingTime = 0.0f;
    protected BaseArtillery artilleryMet = null;

    public BaseMinion(float x, float y, Stage s, String minionName) {
        super(x, y, s);

        if(minionName.equals("boss")){
            String[] walkFilenames = {"demon-idle-1.png", "demon-idle-2.png","demon-idle-3.png","demon-idle-4.png","demon-idle-5.png","demon-idle-6.png"};
            walkAnimation = loadAnimationFromFiles(walkFilenames, 0.1f, true);

            String[] eatFilenames = {"demon-attack-1.png", "demon-attack-2.png", "demon-attack-3.png", "demon-attack-4.png", "demon-attack-5.png", "demon-attack-6.png", "demon-attack-7.png", "demon-attack-8.png", "demon-attack-9.png", "demon-attack-10.png", "demon-attack-11.png", "demon-attack-12.png", "demon-attack-13.png", "demon-attack-14.png", "demon-attack-15.png", "demon-attack-16.png", "demon-attack-17.png", "demon-attack-18.png"};
            eatAnimation =  loadAnimationFromFiles(eatFilenames, 0.1f, true);
        } else{
            if(!minionName.equals("ransomware")){
                walkAnimation = loadAnimationFromSheet(minionName + "-minion.png", 1, 3, 0.1f, true);
                eatAnimation = loadAnimationFromSheet(minionName + "-minion.png", 1, 3, 0.1f, true);
            } else{
                walkAnimation = loadAnimationFromSheet(minionName + "-minion.png", 1, 4, 0.1f, true);
                eatAnimation = loadAnimationFromSheet(minionName + "-minion.png", 1, 4, 0.1f, true);
            }
        }
    }

    public void setMinionSpeed(float speed){
        this.speed = speed;
        normalSpeed = speed;
    }

    public void setMinionScale(float xyScale) {
        setScale(xyScale);
        setBoundaryPolygon(4);
    }

    public void setDamage(float damage){
        this.damage = damage;
    }

    protected void resetSpeedAffectedByBullet(float dt){
        if (speedDecreaseDuration > 0) {
            speedDecreaseDuration -= dt;
        }
        else {
            speedDecreaseDuration = -Float.MAX_VALUE;
            speed = normalSpeed;
        }
        setSpeed(-speed);
    }

    protected void walk(float dt){
        if (artilleryMet != null) return;
        changeToAnimation("walk");
        resetSpeedAffectedByBullet(dt);
        applyPhysics(dt);
    }

    protected void eat(float dt) {
        if (artilleryMet != null) {
            coolingTime -= dt;
        }
        if (coolingTime < 0) {
            changeToAnimation("eat");
            coolingTime = CD;
            if (artilleryMet != null) {
//                eatSound.play(0.1f);
                artilleryMet.hitByZombie(damage);
            }
        }
    }

    protected void move(float dt){
        artilleryMet = null;
        for (BaseActor artillery: BaseActor.getAliveList(getStage(), "com.mygdx.game.BaseArtillery")) {
            if (getRow() == artillery.getRow() && overlaps(artillery)){
                artilleryMet = (BaseArtillery) artillery;
                break;
            }
        }
        walk(dt);
        eat(dt);
    }

    private void changeToAnimation(String animation){
        if(animation.contains("eat")){
           setAnimation(eatAnimation);
        } else{
            setAnimation(walkAnimation);
        }
    }

    public void setHealth(int health){
        this.health = health;
    }

    @Override
    public void act(float dt) {
        super.act(dt);
        if(isAlive()) move(dt);
    }

    public void hitByBullet (Bullet bullet) {
        if (! bullet.isAlive()) return;
        Bullet.BulletEffect bulletEffect = bullet.getBulletEffect();
        health -= bulletEffect.getDamage();
        if (speedDecreaseDuration < 0 && speed == normalSpeed) {
            speedDecreaseDuration = bulletEffect.getDuration();
            speed *= (1.0f - bulletEffect.getDecreaseEffect());
        }
    }
}
