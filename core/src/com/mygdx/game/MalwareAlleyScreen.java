package com.mygdx.game;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.g2d.GlyphLayout;
import com.badlogic.gdx.scenes.scene2d.Event;
import com.badlogic.gdx.scenes.scene2d.EventListener;
import com.badlogic.gdx.scenes.scene2d.InputEvent;
import com.badlogic.gdx.scenes.scene2d.Touchable;
import com.badlogic.gdx.scenes.scene2d.actions.Actions;
import com.badlogic.gdx.scenes.scene2d.ui.Container;
import com.badlogic.gdx.scenes.scene2d.ui.Label;
import com.badlogic.gdx.scenes.scene2d.ui.Table;
import com.badlogic.gdx.scenes.scene2d.ui.TextButton;
import com.badlogic.gdx.scenes.scene2d.utils.FocusListener;
import com.badlogic.gdx.utils.Align;
import com.badlogic.gdx.utils.TimeUtils;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Random;

import util.Constants;
import util.Enum.*;
import util.QuestionsManager.Question;


public class MalwareAlleyScreen extends BaseScreen{
    public static final String TAG = MalwareAlleyScreen.class.getName();

    private String question;
    private String aChoice;
    private String bChoice;
    private String cChoice;
    private String dChoice;

    private UIButton mysteryQuestion;
    private UIButton veryEasyLeft;
    private UIButton easyLeft;
    private UIButton mediumLeft;
    private UIButton hardLeft;
    private UIButton veryHardLeft;
    private UIButton veryEasyRight;
    private UIButton easyRight;
    private UIButton mediumRight;
    private UIButton hardRight;
    private UIButton veryHardRight;

    private BaseActor factoryResetLifeline;
    private BaseActor malwareAgencyLifeline;
    private BaseActor panicLifeline;
    private String questionTopic;
    private QuestionArea questionArea;
    private ChoiceButton aChoiceButton;
    private ChoiceButton bChoiceButton;
    private ChoiceButton cChoiceButton;
    private ChoiceButton dChoiceButton;
    private BaseActor farGround;
    private BaseActor midGround;
    private BaseActor foreGround;
    private MABoss boss;
    private Explosion explosion;
    private Label scoreHud;
    private Label earnedMalwareBucks;
    private Label damage;
    private Scene scene;
    private Scene farGroundScene;
    private Scene midGroundScene;
    private Scene foreGroundScene;
    private Scene bossScene;
    private Scene scene4;
    private Scene scene5;
    private Scene scene6;
    private Scene scene7;
    private Scene scene8;
    private Scene scene9;
    private long time;

    private Table lifelinesTable;
    private Table questionAreaTable;
    private Table difficultyTable;
    private Table hudTable;

    private boolean reachedMinimumQuota;
    private int noOfAnsweredQuestions;
    private int currentScore;
    private int scoreEarned;
    private int damageDealt;

    public MalwareAlleyScreen() throws IOException {
    }


    @Override
    protected void initialize() {
        //debug
        noOfAnsweredQuestions = 10;


        farGround = new BaseActor(0, 0, mainStage);
        farGround.loadTexture("farground.png");
        farGround.setPosition(-367, 0);

        midGround = new BaseActor(0, 0, mainStage);
        midGround.loadTexture("midground.png");
        midGround.setPosition(-467, 0);

        foreGround = new BaseActor(0, 0, mainStage);
        foreGround.loadTexture("foreground.png");
        foreGround.setPosition(-567, 0);

        boss = new MABoss(0, 0, mainStage);
        boss.setPosition(-155, 120);
        boss.idleAnimation();

        mysteryQuestion = new UIButton("mystery-question");

        veryEasyLeft = new UIButton("very-easy");
        easyLeft = new UIButton("easy");
        mediumLeft = new UIButton("medium");
        hardLeft = new UIButton("hard");
        veryHardLeft = new UIButton("very-hard");

        veryEasyRight = new UIButton("very-easy");
        easyRight = new UIButton("easy");
        mediumRight = new UIButton("medium");
        hardRight = new UIButton("hard");
        veryHardRight = new UIButton("very-hard");

        mysteryQuestion.setDisabled(true);
        mysteryQuestion.setTouchable(Touchable.disabled);

        veryEasyLeft.addListener(new EventListener() {
            @Override
            public boolean handle(Event e) {
                if (!(e instanceof InputEvent) ||
                        !((InputEvent) e).getType().equals(InputEvent.Type.touchDown)) {
                    return false;
                }
                Gdx.app.log(TAG, "CLICKED VERY EASY");
                initQuestions(Difficulty.VERY_EASY_LEFT);
                scoreEarned = Constants.SCORE_VERY_EASY;
                damageDealt = Constants.DAMAGE_VERY_EASY;

                veryEasyLeft.setDisabled(true);
                veryEasyLeft.setTouchable(Touchable.disabled);
                animationSequence();
                return false;
            }
        });

        easyLeft.addListener(new EventListener() {
            @Override
            public boolean handle(Event e) {
                if (!(e instanceof InputEvent) ||
                        !((InputEvent) e).getType().equals(InputEvent.Type.touchDown)) {
                    return false;
                }
                Gdx.app.log(TAG, "CLICKED EASY");
                initQuestions(Difficulty.EASY_LEFT);
                scoreEarned = Constants.SCORE_EASY;
                damageDealt = Constants.DAMAGE_EASY;

                easyLeft.setDisabled(true);
                easyLeft.setTouchable(Touchable.disabled);
                animationSequence();
                return false;
            }
        });

        mediumLeft.addListener(new EventListener() {
            @Override
            public boolean handle(Event e) {
                if (!(e instanceof InputEvent) ||
                        !((InputEvent) e).getType().equals(InputEvent.Type.touchDown)) {
                    return false;
                }
                Gdx.app.log(TAG, "CLICKED MEDIUM");
                initQuestions(Difficulty.MEDIUM_LEFT);
                scoreEarned = Constants.SCORE_MEDIUM;
                damageDealt = Constants.DAMAGE_MEDIUM;

                mediumLeft.setDisabled(true);
                mediumLeft.setTouchable(Touchable.disabled);
                animationSequence();
                return false;
            }
        });

        hardLeft.addListener(new EventListener() {
            @Override
            public boolean handle(Event e) {
                if (!(e instanceof InputEvent) ||
                        !((InputEvent) e).getType().equals(InputEvent.Type.touchDown)) {
                    return false;
                }
                Gdx.app.log(TAG, "CLICKED HARD");
                initQuestions(Difficulty.HARD_LEFT);
                scoreEarned = Constants.SCORE_HARD;
                damageDealt = Constants.DAMAGE_HARD;

                hardLeft.setDisabled(true);
                hardLeft.setTouchable(Touchable.disabled);
                animationSequence();
                return false;
            }
        });

        veryHardLeft.addListener(new EventListener() {
            @Override
            public boolean handle(Event e) {
                if (!(e instanceof InputEvent) ||
                        !((InputEvent) e).getType().equals(InputEvent.Type.touchDown)) {
                    return false;
                }
                Gdx.app.log(TAG, "CLICKED VERY HARD");
                initQuestions(Difficulty.VERY_HARD_LEFT);
                scoreEarned = Constants.SCORE_VERY_HARD;
                damageDealt = Constants.DAMAGE_VERY_HARD;

                veryHardLeft.setDisabled(true);
                veryHardLeft.setTouchable(Touchable.disabled);
                animationSequence();
                return false;
            }
        });

        veryEasyRight.addListener(new EventListener() {
            @Override
            public boolean handle(Event e) {
                if (!(e instanceof InputEvent) ||
                        !((InputEvent) e).getType().equals(InputEvent.Type.touchDown)) {
                    return false;
                }
                Gdx.app.log(TAG, "CLICKED VERY EASY");
                initQuestions(Difficulty.VERY_EASY_RIGHT);
                scoreEarned = Constants.SCORE_VERY_EASY;
                damageDealt = Constants.DAMAGE_VERY_EASY;

                veryEasyRight.setDisabled(true);
                veryEasyRight.setTouchable(Touchable.disabled);
                animationSequence();
                return false;
            }
        });

        easyRight.addListener(new EventListener() {
            @Override
            public boolean handle(Event e) {
                if (!(e instanceof InputEvent) ||
                        !((InputEvent) e).getType().equals(InputEvent.Type.touchDown)) {
                    return false;
                }
                Gdx.app.log(TAG, "CLICKED EASY");
                initQuestions(Difficulty.EASY_RIGHT);
                scoreEarned = Constants.SCORE_EASY;
                damageDealt = Constants.DAMAGE_EASY;

                easyRight.setDisabled(true);
                easyRight.setTouchable(Touchable.disabled);
                animationSequence();
                return false;
            }
        });

        mediumRight.addListener(new EventListener() {
            @Override
            public boolean handle(Event e) {
                if (!(e instanceof InputEvent) ||
                        !((InputEvent) e).getType().equals(InputEvent.Type.touchDown)) {
                    return false;
                }
                Gdx.app.log(TAG, "CLICKED MEDIUM");
                initQuestions(Difficulty.MEDIUM_RIGHT);
                scoreEarned = Constants.SCORE_MEDIUM;
                damageDealt = Constants.DAMAGE_MEDIUM;

                mediumRight.setDisabled(true);
                mediumRight.setTouchable(Touchable.disabled);
                animationSequence();
                return false;
            }
        });

        hardRight.addListener(new EventListener() {
            @Override
            public boolean handle(Event e) {
                if (!(e instanceof InputEvent) ||
                        !((InputEvent) e).getType().equals(InputEvent.Type.touchDown)) {
                    return false;
                }
                Gdx.app.log(TAG, "CLICKED HARD");
                initQuestions(Difficulty.HARD_RIGHT);
                scoreEarned = Constants.SCORE_HARD;
                damageDealt = Constants.DAMAGE_HARD;

                hardRight.setDisabled(true);
                hardRight.setTouchable(Touchable.disabled);
                animationSequence();
                return false;
            }
        });

        veryHardRight.addListener(new EventListener() {
            @Override
            public boolean handle(Event e) {
                if (!(e instanceof InputEvent) ||
                        !((InputEvent) e).getType().equals(InputEvent.Type.touchDown)) {
                    return false;
                }
                Gdx.app.log(TAG, "CLICKED VERY HARD");
                initQuestions(Difficulty.VERY_HARD_RIGHT);
                scoreEarned = Constants.SCORE_VERY_HARD;
                damageDealt = Constants.DAMAGE_VERY_HARD;

                veryHardRight.setDisabled(true);
                veryHardRight.setTouchable(Touchable.disabled);
                animationSequence();
                return false;
            }
        });

        difficultyTable = new Table();
        difficultyTable.setFillParent(true);
        uiStage.addActor(difficultyTable);

        difficultyTable.padBottom(200);
        difficultyTable.padTop(40);
        difficultyTable.padLeft(80);
        difficultyTable.padRight(80);
        difficultyTable.add(mysteryQuestion).colspan(3).align(Align.top);
        difficultyTable.add().expandY();
        difficultyTable.row();
        difficultyTable.add(veryEasyLeft);
        difficultyTable.add().expandX();
        difficultyTable.add(veryEasyRight);
        difficultyTable.add().expandY();
        difficultyTable.row();
        difficultyTable.add(easyLeft);
        difficultyTable.add().expandX();
        difficultyTable.add(easyRight);
        difficultyTable.add().expandY();
        difficultyTable.row();
        difficultyTable.add(mediumLeft);
        difficultyTable.add().expandX();
        difficultyTable.add(mediumRight);
        difficultyTable.add().expandY();
        difficultyTable.row();
        difficultyTable.add(hardLeft);
        difficultyTable.add().expandX();
        difficultyTable.add(hardRight);
        difficultyTable.add().expandY();
        difficultyTable.row();
        difficultyTable.add(veryHardLeft);
        difficultyTable.add().expandX();
        difficultyTable.add(veryHardRight);
        difficultyTable.add().expandY();

        factoryResetLifeline = new BaseActor(0, 0, mainStage);
        factoryResetLifeline.loadTexture("factory-reset.png");

        malwareAgencyLifeline = new BaseActor(0, 0, mainStage);
        if(BaseGame.malwareAlleyAgency == Agency.ARIVA){
            malwareAgencyLifeline.loadTexture("ariva.png");
        } else if(BaseGame.malwareAlleyAgency == Agency.TESE){
            malwareAgencyLifeline.loadTexture("tese.png");
        } else if(BaseGame.malwareAlleyAgency == Agency.TORTON){
            malwareAgencyLifeline.loadTexture("torton.png");
        } else if(BaseGame.malwareAlleyAgency == Agency.TSAVA){
            malwareAgencyLifeline.loadTexture("tsava.png");
        } else if(BaseGame.malwareAlleyAgency == Agency.SKYSKRAPER){
            malwareAgencyLifeline.loadTexture("skyskraper.png");
        }

        panicLifeline = new BaseActor(0, 0, mainStage);
        panicLifeline.loadTexture("panic.png");

        factoryResetLifeline.addListener(new EventListener() {
            @Override
            public boolean handle(Event e) {
                if (!(e instanceof InputEvent) ||
                        !((InputEvent) e).getType().equals(InputEvent.Type.touchDown)) {
                    return false;
                }
                // debug mode
//                factoryResetLifeline.addAction(Actions.hide());
                lifelineAnimation(Lifeline.FACTORY_RESET);
                return false;
            }
        });

        malwareAgencyLifeline.addListener(new EventListener() {
            @Override
            public boolean handle(Event e) {
                if (!(e instanceof InputEvent) ||
                        !((InputEvent) e).getType().equals(InputEvent.Type.touchDown)) {
                    return false;
                }
                malwareAgencyLifeline.addAction(Actions.hide());
                lifelineAnimation(Lifeline.MALWARE_AGENCY);
                return false;
            }
        });

        panicLifeline.addListener(new EventListener() {
            @Override
            public boolean handle(Event e) {
                if (!(e instanceof InputEvent) ||
                        !((InputEvent) e).getType().equals(InputEvent.Type.touchDown)) {
                    return false;
                }
                panicLifeline.addAction(Actions.hide());
                lifelineAnimation(Lifeline.PANIC);
                return false;
            }
        });

        questionArea = new QuestionArea(0, 0, mainStage);
        questionArea.alignCenter();

        aChoiceButton = new ChoiceButton(0, 0, mainStage, "a");
        aChoiceButton.alignCenter();

        bChoiceButton = new ChoiceButton(0, 0, mainStage, "b");
        bChoiceButton.alignCenter();

        cChoiceButton = new ChoiceButton(0, 0, mainStage, "c");
        cChoiceButton.alignCenter();

        dChoiceButton = new ChoiceButton(0, 0, mainStage, "d");
        dChoiceButton.alignCenter();

        aChoiceButton.addListener(
                new EventListener() {
                    @Override
                    public boolean handle(Event e) {
                        if (!(e instanceof InputEvent) ||
                                !((InputEvent) e).getType().equals(InputEvent.Type.touchDown)) {
                            return false;
                        }
                        Gdx.app.log(TAG, "CLICKED CHOICE A");
                        boolean correct = aChoiceButton.isCorrectChoice();
                        Gdx.app.log(TAG, String.valueOf(correct));
                        judgeAnswer(correct);
                        return false;
                    }
                }
        );



        bChoiceButton.addListener(
                new EventListener() {
                    @Override
                    public boolean handle(Event e) {
                        if (!(e instanceof InputEvent) ||
                                !((InputEvent) e).getType().equals(InputEvent.Type.touchDown)) {
                            return false;
                        }
                        Gdx.app.log(TAG, "CLICKED CHOICE B");
                        boolean correct = bChoiceButton.isCorrectChoice();
                        Gdx.app.log(TAG, String.valueOf(correct));
                        judgeAnswer(correct);
                        return false;
                    }
                }
        );

        cChoiceButton.addListener(
                new EventListener() {
                    @Override
                    public boolean handle(Event e) {
                        if (!(e instanceof InputEvent) ||
                                !((InputEvent) e).getType().equals(InputEvent.Type.touchDown)) {
                            return false;
                        }
                        Gdx.app.log(TAG, "CLICKED CHOICE C");
                        boolean correct = cChoiceButton.isCorrectChoice();
                        Gdx.app.log(TAG, String.valueOf(correct));
                        judgeAnswer(correct);
                        return false;
                    }
                }
        );

        dChoiceButton.addListener(
                new EventListener() {
                    @Override
                    public boolean handle(Event e) {
                        if (!(e instanceof InputEvent) ||
                                !((InputEvent) e).getType().equals(InputEvent.Type.touchDown)) {
                            return false;
                        }
                        Gdx.app.log(TAG, "CLICKED CHOICE D");
                        boolean correct = dChoiceButton.isCorrectChoice();
                        Gdx.app.log(TAG, String.valueOf(correct));
                        judgeAnswer(correct);
                        return false;
                    }
                }
        );

        lifelinesTable = new Table();
        lifelinesTable.setFillParent(true);
        uiStage.addActor(lifelinesTable);

        lifelinesTable.padTop(10);
        lifelinesTable.padRight(200);
        lifelinesTable.padLeft(200);
        lifelinesTable.add(factoryResetLifeline).expandX().top();
        lifelinesTable.add(malwareAgencyLifeline).expandX().top();
        lifelinesTable.add(panicLifeline).expandX().top();
        lifelinesTable.add().expandY();
        lifelinesTable.setVisible(false);

        questionAreaTable = new Table();
        questionAreaTable.setFillParent(true);
        uiStage.addActor(questionAreaTable);

        questionAreaTable.padTop(90);
        questionAreaTable.padBottom(5);

        questionAreaTable.row();
        questionAreaTable.add(questionArea).colspan(6);
        questionAreaTable.row();
        questionAreaTable.add(aChoiceButton).expandX().expandY();
        questionAreaTable.add(bChoiceButton).expandX().expandY();
        questionAreaTable.row();
        questionAreaTable.add(cChoiceButton).expandX().expandY();
        questionAreaTable.add(dChoiceButton).expandX().expandY();
        questionAreaTable.setVisible(false);

        hudTable = new Table();
        hudTable.setFillParent(true);
        uiStage.addActor(hudTable);

        BaseActor malwareBucks = new BaseActor(0, 0, uiStage);
        malwareBucks.loadTexture("malware-bucks.png");

        scoreHud = new Label("0", BaseGame.labelStyle);
        earnedMalwareBucks = new Label("0", BaseGame.labelStyle);

        malwareBucks.addActor(scoreHud);
        scoreHud.setPosition(malwareBucks.getWidth() + scoreHud.getWidth(), 0);

        hudTable.pad(10);
        hudTable.add(malwareBucks).top();
        hudTable.add().expandX().expandY();

    }

    private void lifelineAnimation(Lifeline lifeline){
        final Scene scene = new Scene();
        mainStage.addActor(scene);
        String correctChoice = "";

        Random rand = new Random();

        if(aChoiceButton.isCorrectChoice()) correctChoice = "A";
        if(bChoiceButton.isCorrectChoice()) correctChoice = "B";
        if(cChoiceButton.isCorrectChoice()) correctChoice = "C";
        if(dChoiceButton.isCorrectChoice()) correctChoice = "D";

        DialogBox dialogBox = new DialogBox(0, 0, uiStage);
        dialogBox.setDialogSize(800, 200);
        dialogBox.setBackgroundColor( new Color(33, 0, 75, 1) );
        dialogBox.setOpacity(0);

        TextButton okButton = new TextButton("Ok", BaseGame.textButtonStyle);
        okButton.setVisible(false);

        dialogBox.addActor(okButton);
        okButton.setPosition(dialogBox.getWidth() - okButton.getWidth() - 10, 0);

        if(lifeline == Lifeline.FACTORY_RESET){
            BaseActor factoryResetLarge = new BaseActor(0, 0, uiStage);
            factoryResetLarge.loadTexture("factory-reset-large.png");
            factoryResetLarge.setPosition(-factoryResetLarge.getWidth(), 0);

            scene.addSegment(new SceneSegment(dialogBox, Actions.fadeIn(1)));
            scene.addSegment(new SceneSegment(factoryResetLarge, Actions.moveTo(0, 0, 1)));
            scene.addSegment(new SceneSegment(dialogBox, SceneActions.setText("The answer is most definitely " + correctChoice + ".")));
            scene.addSegment(new SceneSegment(okButton, Actions.show()));
            scene.addSegment(new SceneSegment(okButton, Actions.addListener(new EventListener() {
                @Override
                public boolean handle(Event e) {
                    if (!(e instanceof InputEvent) ||
                            !((InputEvent) e).getType().equals(InputEvent.Type.touchDown)) {
                        return false;
                    }
                    scene.loadNextSegment();
                    return false;
                }
            }, true)));
            scene.addSegment(new SceneSegment(dialogBox, SceneActions.pause()));

            // return to original position
            scene.addSegment(new SceneSegment(factoryResetLarge, Actions.hide()));
            scene.addSegment(new SceneSegment(dialogBox, Actions.hide()));
            scene.addSegment(new SceneSegment(okButton, Actions.hide()));
            scene.start();
        }

        if(lifeline == Lifeline.MALWARE_AGENCY){
            BaseActor malwareAgencyLarge = new BaseActor(0, 0, uiStage);
            String malwareAgencyChoice = "";

            if(BaseGame.malwareAlleyAgency == Agency.ARIVA) {
                malwareAgencyLarge.loadTexture("ariva-large.png");
            }
            if(BaseGame.malwareAlleyAgency == Agency.TESE) {
                malwareAgencyLarge.loadTexture("tese-large.png");
            }
            if(BaseGame.malwareAlleyAgency == Agency.TORTON) {
                malwareAgencyLarge.loadTexture("torton-large.png");
            }
            if(BaseGame.malwareAlleyAgency == Agency.TSAVA) {
                malwareAgencyLarge.loadTexture("tsava-large.png");
            }
            if(BaseGame.malwareAlleyAgency == Agency.SKYSKRAPER) {
                malwareAgencyLarge.loadTexture("skyskraper-large.png");
            }

            malwareAgencyLarge.setPosition(-malwareAgencyLarge.getWidth(), 0);

            // Ariva anti-malware lifeline is 90% reliable if the topic is overview
            if(this.questionTopic.equalsIgnoreCase("Overview") && BaseGame.malwareAlleyAgency == Agency.ARIVA){
                if(rand.nextInt(100) < 90){
                    malwareAgencyChoice = correctChoice;
                }
            } else{
                // 75% reliable otherwise
                if(rand.nextInt(100) < 75){
                    malwareAgencyChoice = generateDummyChoice(false);
                }
            }

            // Tese anti-malware lifeline is 90% reliable if the topic is process management
            if(this.questionTopic.equalsIgnoreCase("Process Management") && BaseGame.malwareAlleyAgency == Agency.TESE){
                if(rand.nextInt(100) < 90){
                    malwareAgencyChoice = correctChoice;
                }
            } else{
                // 75% reliable otherwise
                if(rand.nextInt(100) < 75){
                    malwareAgencyChoice = generateDummyChoice(false);
                }
            }

            // Torton anti-malware lifeline is 90% reliable if the topic is memory management
            if(this.questionTopic.equalsIgnoreCase("Memory Management") && BaseGame.malwareAlleyAgency == Agency.TORTON){
                if(rand.nextInt(100) < 90){
                    malwareAgencyChoice = correctChoice;
                }
            } else{
                // 75% reliable otherwise
                if(rand.nextInt(100) < 75){
                    malwareAgencyChoice = generateDummyChoice(false);
                }
            }

            // Tsava anti-malware lifeline is 90% reliable if the topic is storage management
            if(this.questionTopic.equalsIgnoreCase("Storage Management") && BaseGame.malwareAlleyAgency == Agency.TSAVA){
                if(rand.nextInt(100) < 90){
                    malwareAgencyChoice = correctChoice;
                }
            } else{
                // 75% reliable otherwise
                if(rand.nextInt(100) < 75){
                    malwareAgencyChoice = generateDummyChoice(false);
                }
            }

            // Skyskraper anti-malware lifeline is 90% reliable if the topic is security and protection
            if(this.questionTopic.equalsIgnoreCase("Security and Protection") && BaseGame.malwareAlleyAgency == Agency.SKYSKRAPER){
                if(rand.nextInt(100) < 90){
                    malwareAgencyChoice = correctChoice;
                }
            } else{
                // 75% reliable otherwise
                if(rand.nextInt(100) < 75){
                    malwareAgencyChoice = generateDummyChoice(false);
                }
            }
            malwareAgencyLarge.setPosition(-malwareAgencyLarge.getWidth(), 0);

            scene.addSegment(new SceneSegment(dialogBox, Actions.fadeIn(1)));
            scene.addSegment(new SceneSegment(malwareAgencyLarge, Actions.moveTo(0, 0, 1)));
            scene.addSegment(new SceneSegment(dialogBox, SceneActions.setText("My research tells me it's " + malwareAgencyChoice + ".")));
            scene.addSegment(new SceneSegment(okButton, Actions.show()));
            scene.addSegment(new SceneSegment(okButton, Actions.addListener(new EventListener() {
                @Override
                public boolean handle(Event e) {
                    if (!(e instanceof InputEvent) ||
                            !((InputEvent) e).getType().equals(InputEvent.Type.touchDown)) {
                        return false;
                    }
                    scene.loadNextSegment();
                    return false;
                }
            }, true)));
            scene.addSegment(new SceneSegment(dialogBox, SceneActions.pause()));

            // return to original position
            scene.addSegment(new SceneSegment(malwareAgencyLarge, Actions.hide()));
            scene.addSegment(new SceneSegment(dialogBox, Actions.hide()));
            scene.addSegment(new SceneSegment(okButton, Actions.hide()));
            scene.start();
        }

        if(lifeline == Lifeline.PANIC){
            String panicChoice = "";
            // Panic lifeline is 25% reliable
            panicChoice = generateDummyChoice(true);

            BaseActor panicLarge = new BaseActor(0, 0, uiStage);
            panicLarge.loadTexture("panic-large.png");
            panicLarge.setPosition(-panicLarge.getWidth(), 0);

            scene.addSegment(new SceneSegment(dialogBox, Actions.fadeIn(1)));
            scene.addSegment(new SceneSegment(panicLarge, Actions.moveTo(0, 0, 1)));
            scene.addSegment(new SceneSegment(dialogBox, SceneActions.setText("Umm... uhh, maybe it's " + panicChoice + "?")));
            scene.addSegment(new SceneSegment(okButton, Actions.show()));
            scene.addSegment(new SceneSegment(okButton, Actions.addListener(new EventListener() {
                @Override
                public boolean handle(Event e) {
                    if (!(e instanceof InputEvent) ||
                            !((InputEvent) e).getType().equals(InputEvent.Type.touchDown)) {
                        return false;
                    }
                    scene.loadNextSegment();
                    return false;
                }
            }, true)));
            scene.addSegment(new SceneSegment(dialogBox, SceneActions.pause()));

            // return to original position
            scene.addSegment(new SceneSegment(panicLarge, Actions.hide()));
            scene.addSegment(new SceneSegment(dialogBox, Actions.hide()));
            scene.addSegment(new SceneSegment(okButton, Actions.hide()));
            scene.start();
        }

    }

    private String generateDummyChoice(boolean panic){
        ArrayList dummyChoices = null;
        if(!panic){
            if(aChoiceButton.isCorrectChoice()) dummyChoices = new ArrayList<>(Arrays.asList('B', 'C', 'D'));
            if(bChoiceButton.isCorrectChoice()) dummyChoices = new ArrayList<>(Arrays.asList('A', 'C', 'D'));
            if(cChoiceButton.isCorrectChoice()) dummyChoices = new ArrayList<>(Arrays.asList('A', 'B', 'D'));
            if(dChoiceButton.isCorrectChoice()) dummyChoices = new ArrayList<>(Arrays.asList('A', 'B', 'C'));

            Collections.shuffle(dummyChoices);
            return dummyChoices.get(0).toString();
        }
        dummyChoices = new ArrayList<>(Arrays.asList('A', 'B', 'C', 'D'));
        Collections.shuffle(dummyChoices);
        return dummyChoices.get(0).toString();
    }

    private void animationSequence(){
        scene = new Scene();
        foreGroundScene = new Scene();
        midGroundScene = new Scene();
        farGroundScene = new Scene();
        bossScene = new Scene();

        mainStage.addActor(scene);
        mainStage.addActor(farGroundScene);
        mainStage.addActor(midGroundScene);
        mainStage.addActor(foreGroundScene);
        mainStage.addActor(bossScene);

        final DialogBox dialogBox = new DialogBox(0, 0, mainStage);
        dialogBox.setDialogSize(800, 200);
        dialogBox.setBackgroundColor( new Color(33, 0, 75, 1) );
        dialogBox.setOpacity(0);

        final BaseActor helper = new BaseActor(0, 0, uiStage);
        helper.loadTexture("helper.png");
        helper.setPosition(-204,0);

        final TextButton continueButton = new TextButton("Continue", BaseGame.textButtonStyle);
        continueButton.setPosition(30, 120);
        continueButton.setVisible(false);

        EventListener firstDialogListener = new EventListener() {
            @Override
            public boolean handle(Event e) {
                if (!(e instanceof InputEvent) ||
                        !((InputEvent) e).getType().equals(InputEvent.Type.touchDown)) {
                    return false;
                }
                Gdx.app.log(TAG, "CLICKED CONTINUE");
                bossScene.loadNextSegment();
                return false;
            }
        };

        EventListener secondDialogListener = new EventListener() {
            @Override
            public boolean handle(Event e) {
                if (!(e instanceof InputEvent) ||
                        !((InputEvent) e).getType().equals(InputEvent.Type.touchDown)) {
                    return false;
                }
                Gdx.app.log(TAG, "CLICKED CONTINUE");
                bossScene.loadNextSegment();
                return false;
            }
        };

        EventListener thirdDialogListener = new EventListener() {
            @Override
            public boolean handle(Event e) {
                if (!(e instanceof InputEvent) ||
                        !((InputEvent) e).getType().equals(InputEvent.Type.touchDown)) {
                    return false;
                }
                Gdx.app.log(TAG, "CLICKED CONTINUE");

                if(noOfAnsweredQuestions != 11) {
                    // spawn explosions
                    Explosion explosion1 = new Explosion(0, 0, mainStage);
                    boss.addActor(explosion1);
                    explosion1.setPosition(boss.getWidth() - explosion1.getWidth(), 0);

                    Explosion explosion2 = new Explosion(0, 0, mainStage);
                    boss.addActor(explosion2);
                    explosion1.setPosition((boss.getWidth() + explosion2.getWidth()) / 2, (boss.getHeight() - explosion2.getHeight()));

                    scene.loadNextSegment();
                    farGroundScene.loadNextSegment();
                    midGroundScene.loadNextSegment();
                    foreGroundScene.loadNextSegment();
                    bossScene.loadNextSegment();
                } else{
                    Table youWinTable = new Table();
                    youWinTable.setFillParent(true);
                    mainStage.addActor(youWinTable);

                    BaseActor youWin = new BaseActor(0, 0, mainStage);
                    youWin.loadTexture("you-win.png");
                    youWin.setOpacity(0);

                    UIButton mainMenuButton = new UIButton("main-menu");
                    UIButton highScoresButton = new UIButton("highscores");

                    mainMenuButton.addListener(
                            new EventListener() {
                                @Override
                                public boolean handle(Event e) {
                                    if (!(e instanceof InputEvent) ||
                                            !((InputEvent) e).getType().equals(InputEvent.Type.touchDown)) {
                                        return false;
                                    }
                                    Gdx.app.log(TAG, "CLICKED MAIN MENU");
                                    try {
                                        OSGame.setActiveScreen(new MenuScreen());
                                    } catch (IOException ioException) {
                                        ioException.printStackTrace();
                                    }
                                    return false;
                                }
                            }
                    );

                    youWinTable.padTop(80);
                    youWinTable.padBottom(30);

                    youWinTable.add(youWin).center();
                    youWinTable.add().expandY();
                    youWinTable.row();
                    youWinTable.add(mainMenuButton).expandX().center();
                    youWinTable.add().height(50);
                    youWinTable.row();
                    youWinTable.add(highScoresButton).expandX().center();

                    Scene youWinScene = new Scene();
                    boss.deathAnimation();
                    mainStage.addActor(youWinScene);

                    youWinScene.addSegment(new SceneSegment(helper, Actions.hide()));
                    youWinScene.addSegment(new SceneSegment(dialogBox, Actions.hide()));
                    youWinScene.addSegment(new SceneSegment(continueButton, Actions.hide()));
                    youWinScene.addSegment(new SceneSegment(youWin, Actions.fadeIn(1)));

                    youWinScene.start();
                }


                return false;
            }
        };



        dialogBox.addActor(continueButton);
        continueButton.setPosition(dialogBox.getWidth() - continueButton.getWidth() - 10, 0);

        Table uiTable = new Table();
        uiTable.setFillParent(true);
        mainStage.addActor(uiTable);

        uiTable.add(dialogBox).expandX().expandY().bottom();

        // start
        scene.addSegment(new SceneSegment(difficultyTable, Actions.hide()));
        scene.addSegment(new SceneSegment(questionAreaTable, Actions.show()));
        scene.addSegment(new SceneSegment(lifelinesTable, Actions.show()));
        scene.addSegment(new SceneSegment(questionAreaTable, SceneActions.pause()));
        scene.addSegment(new SceneSegment(lifelinesTable, Actions.hide()));
        scene.addSegment(new SceneSegment(questionAreaTable, Actions.hide()));

        farGroundScene.addSegment(new SceneSegment(farGround, SceneActions.pause()));
        midGroundScene.addSegment(new SceneSegment(midGround, SceneActions.pause()));
        foreGroundScene.addSegment(new SceneSegment(foreGround, SceneActions.pause()));
        bossScene.addSegment(new SceneSegment(boss, SceneActions.pause()));

        farGroundScene.addSegment(new SceneSegment(farGround, Actions.moveTo(0, 0, 3)));
        midGroundScene.addSegment(new SceneSegment(midGround, Actions.moveTo(0, 0, 3)));
        foreGroundScene.addSegment(new SceneSegment(foreGround, Actions.moveTo(0, 0, 3)));
        bossScene.addSegment(new SceneSegment(boss, Actions.moveTo(385, 120, 3)));

        bossScene.addSegment(new SceneSegment(dialogBox, Actions.fadeIn(1)));
        bossScene.addSegment(new SceneSegment(helper, Actions.moveTo(0, 0, 1)));

        // first dialog
        bossScene.addSegment(new SceneSegment(dialogBox, SceneActions.setText("Correct!")));
        bossScene.addSegment(new SceneSegment(continueButton, Actions.show()));
        bossScene.addSegment(new SceneSegment(continueButton, Actions.addListener(firstDialogListener, true)));
        bossScene.addSegment(new SceneSegment(helper, SceneActions.pause()));
        bossScene.addSegment(new SceneSegment(continueButton, Actions.hide()));
        bossScene.addSegment(new SceneSegment(continueButton, Actions.removeListener(firstDialogListener, true)));

        // second dialog
        bossScene.addSegment(new SceneSegment(dialogBox, SceneActions.setText("You earned " + scoreEarned + " malware bucks!")));
        bossScene.addSegment(new SceneSegment(continueButton, Actions.show()));
        bossScene.addSegment(new SceneSegment(continueButton, Actions.addListener(secondDialogListener, true)));
        bossScene.addSegment(new SceneSegment(helper, SceneActions.pause()));
        bossScene.addSegment(new SceneSegment(continueButton, Actions.hide()));
        bossScene.addSegment(new SceneSegment(continueButton, Actions.removeListener(secondDialogListener, true)));

        // third dialog
        bossScene.addSegment(new SceneSegment(dialogBox, SceneActions.setText(damageDealt + "HP" + " damage to the boss!")));
        bossScene.addSegment(new SceneSegment(continueButton, Actions.show()));
        bossScene.addSegment(new SceneSegment(continueButton, Actions.addListener(thirdDialogListener, true)));
        bossScene.addSegment(new SceneSegment(helper, SceneActions.pause()));
        bossScene.addSegment(new SceneSegment(continueButton, Actions.hide()));
        bossScene.addSegment(new SceneSegment(continueButton, Actions.removeListener(thirdDialogListener, true)));


        // pause until player clicks continue
        scene.addSegment(new SceneSegment(difficultyTable, SceneActions.pause()));
        farGroundScene.addSegment(new SceneSegment(farGround, SceneActions.pause()));
        midGroundScene.addSegment(new SceneSegment(midGround, SceneActions.pause()));
        foreGroundScene.addSegment(new SceneSegment(foreGround, SceneActions.pause()));
        if(noOfAnsweredQuestions != 11){
            bossScene.addSegment(new SceneSegment(boss, SceneActions.pause()));
        }

        // return to original position
        scene.addSegment(new SceneSegment(helper, Actions.moveTo(-helper.getWidth(), 0, 1)));
        scene.addSegment(new SceneSegment(dialogBox, Actions.hide()));
        scene.addSegment(new SceneSegment(continueButton, Actions.hide()));

        farGroundScene.addSegment(new SceneSegment(farGround, Actions.moveTo(-367, 0, 3)));
        midGroundScene.addSegment(new SceneSegment(midGround, Actions.moveTo(-467, 0, 3)));
        foreGroundScene.addSegment(new SceneSegment(foreGround, Actions.moveTo(-567, 0, 3)));
        bossScene.addSegment(new SceneSegment(boss, Actions.moveTo(-155, 120, 2.95f)));
        bossScene.addSegment(new SceneSegment(difficultyTable, Actions.show()));

        scene.start();
        farGroundScene.start();
        midGroundScene.start();
        foreGroundScene.start();
        bossScene.start();
    }

    private void gameOver(){
        Table gameOverTable = new Table();
        gameOverTable.setFillParent(true);
        mainStage.addActor(gameOverTable);

        BaseActor gameOver = new BaseActor(0, 0, mainStage);
        gameOver.loadTexture("game-over.png");
        gameOver.setOpacity(0);

        UIButton mainMenuButton = new UIButton("main-menu");
        UIButton highScoresButton = new UIButton("highscores");

        mainMenuButton.addListener(
                new EventListener() {
                    @Override
                    public boolean handle(Event e) {
                        if (!(e instanceof InputEvent) ||
                                !((InputEvent) e).getType().equals(InputEvent.Type.touchDown)) {
                            return false;
                        }
                        Gdx.app.log(TAG, "CLICKED MAIN MENU");
                        try {
                            OSGame.setActiveScreen(new MenuScreen());
                        } catch (IOException ioException) {
                            ioException.printStackTrace();
                        }
                        return false;
                    }
                }
        );

        gameOverTable.padTop(80);
        gameOverTable.padBottom(30);

        gameOverTable.add(gameOver).center();
        gameOverTable.add().expandY();
        gameOverTable.row();
        gameOverTable.add(mainMenuButton).expandX().center();
        gameOverTable.add().height(50);
        gameOverTable.row();
        gameOverTable.add(highScoresButton).expandX().center();

        Scene gameOverScene = new Scene();
        mainStage.addActor(gameOverScene);

        gameOverScene.addSegment(new SceneSegment(questionAreaTable, Actions.hide()));
        gameOverScene.addSegment(new SceneSegment(gameOver, Actions.fadeIn(1)));

        gameOverScene.start();
    }


    private void judgeAnswer(boolean correct){
        if(correct){
            noOfAnsweredQuestions++;
            currentScore += scoreEarned;
            scene.loadNextSegment();
            farGroundScene.loadNextSegment();
            midGroundScene.loadNextSegment();
            foreGroundScene.loadNextSegment();
            bossScene.loadNextSegment();
        } else{
            gameOver();
        }
    }

    private void initQuestions(Difficulty difficulty){
        int difficultyIndex = -1;

        if(difficulty == Difficulty.VERY_EASY_LEFT) difficultyIndex = 0;
        if(difficulty == Difficulty.VERY_EASY_RIGHT) difficultyIndex = 1;
        if(difficulty == Difficulty.EASY_LEFT) difficultyIndex = 2;
        if(difficulty == Difficulty.EASY_RIGHT) difficultyIndex = 3;
        if(difficulty == Difficulty.MEDIUM_LEFT) difficultyIndex = 4;
        if(difficulty == Difficulty.MEDIUM_RIGHT) difficultyIndex = 5;
        if(difficulty == Difficulty.HARD_LEFT) difficultyIndex = 6;
        if(difficulty == Difficulty.HARD_RIGHT) difficultyIndex = 7;
        if(difficulty == Difficulty.VERY_HARD_LEFT) difficultyIndex = 8;
        if(difficulty == Difficulty.VERY_HARD_RIGHT) difficultyIndex = 9;
        if(difficulty == Difficulty.MYSTERY_QUESTION) difficultyIndex = 10;

        this.questionTopic = questions[difficultyIndex].getTopic();
        this.questionArea.setText(questions[difficultyIndex].getQuestion());
        this.aChoiceButton.setText(questions[difficultyIndex].getChoice().get(0).getChoice());
        this.bChoiceButton.setText(questions[difficultyIndex].getChoice().get(1).getChoice());
        this.cChoiceButton.setText(questions[difficultyIndex].getChoice().get(2).getChoice());
        this.dChoiceButton.setText(questions[difficultyIndex].getChoice().get(3).getChoice());

        this.aChoiceButton.setIsCorrectChoice(questions[difficultyIndex].getChoice().get(0).isCorrectChoice());
        this.bChoiceButton.setIsCorrectChoice(questions[difficultyIndex].getChoice().get(1).isCorrectChoice());
        this.cChoiceButton.setIsCorrectChoice(questions[difficultyIndex].getChoice().get(2).isCorrectChoice());
        this.dChoiceButton.setIsCorrectChoice(questions[difficultyIndex].getChoice().get(3).isCorrectChoice());
    }

    private void checkGameQuota(){
        if(noOfAnsweredQuestions == 8 && !reachedMinimumQuota){
            mysteryQuestion.setDisabled(false);
            mysteryQuestion.setTouchable(Touchable.enabled);

            mysteryQuestion.addListener(new EventListener() {
                @Override
                public boolean handle(Event e) {
                    if (!(e instanceof InputEvent) ||
                            !((InputEvent) e).getType().equals(InputEvent.Type.touchDown)) {
                        return false;
                    }
                    Gdx.app.log(TAG, "CLICKED MYSTERY QUESTION");
                    initQuestions(Difficulty.MYSTERY_QUESTION);
                    scoreEarned = Constants.SCORE_MYSTERY_QUESTION;
                    damageDealt = Constants.DAMAGE_MYSTERY_QUESTION;

                    mysteryQuestion.setDisabled(true);
                    mysteryQuestion.setTouchable(Touchable.disabled);
                    animationSequence();
                    return false;
                }
            });
            reachedMinimumQuota = true;
        }
    }

    @Override
    public void update(float dt) {
        scoreHud.setText(currentScore);
        earnedMalwareBucks.setText(scoreEarned);

        checkGameQuota();
    }
}
