package com.mygdx.game;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.scenes.scene2d.Stage;
import com.badlogic.gdx.scenes.scene2d.actions.Actions;

public class TortonBlast extends BaseArtillery{
    public static final String TAG = RampageDistrictScreen.class.getName();

    private final float CD = 2.0f;
    private float shootingCooldownTime = 0.0f;
    private boolean hasBullet = true;
    private Bullet bullet = null;

    public TortonBlast(float x, float y, Stage s) {
        super(x, y, s);
        String[] filenames = {"torton-blast-1.png", "torton-blast-2.png","torton-blast-3.png","torton-blast-4.png"};
        loadAnimationFromFiles(filenames);
        setBoundaryPolygon(4);
    }

    public TortonBlast(float x, float y, Stage s, String textureName) {
        super(x, y, s);
        String[] filenames = {textureName + "-1.png", textureName + "-2.png", textureName + "-3.png"};
        loadAnimationFromFiles(filenames, 0.1f, true);
        setBoundaryPolygon(4);
//        attackSound = getSoundFromFile(textureName.toLowerCase() + "_attack");
    }

    private boolean checkEnemy() {
        for ( BaseActor minion : BaseActor.getAliveList(this.getStage(), "com.mygdx.game.BaseMinion") ) {
            if (minion.getRow() == this.getRow()) {
                return true;
            }
        }
        return false;
    }

    protected Bullet makeBullet(){
        return new Bullet(0, 0, this.getStage());
    }

    private void onFire(float dt) {
        if (hasDropTarget())
            shootingCooldownTime -= dt;

        if (shootingCooldownTime < 0 && hasBullet && checkEnemy()) {
//            attackSound.play(0.4f, 1.5f, 0.0f);
            bullet = makeBullet();
            bullet.setBulletEffect(0.5f, 100, 2.0f);
            bullet.centerAtActor(new BaseActor(this.getCenterX() + this.getWidth() / 4,
                        this.getCenterY() + this.getHeight()/4, this.getStage()));
            bullet.setGrid(this.getRow(), this.getCol());
            shootingCooldownTime = CD;
            hasBullet = false;
        }
        else {
            if (bullet != null) {
                if (! checkExistenceOfBullet()) {
                    bullet.clearActions();
                    bullet.addAction(Actions.fadeOut(0.1f));
                    bullet.addAction(Actions.after(Actions.removeActor()));
                    bullet = null;
                    hasBullet = true;
                }
            }
        }
    }

    private boolean checkExistenceOfBullet() {
        if (bullet.getX() > 800) return false;
        for (BaseActor minion: BaseActor.getAliveList(this.getStage(), "com.mygdx.game.BaseMinion")) {
            if (bullet.getRow() == minion.getRow() && bullet.getRow() != -1 && bullet.overlaps(minion)){
                ((BaseMinion) minion).hitByBullet(bullet);
                Gdx.app.log(TAG, "torton bullet removed");
                return false;
            }
        }
        return true;
    }

    @Override
    public void act(float dt) {
        super.act(dt);
        onFire(dt);
    }

}
